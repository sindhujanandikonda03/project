#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include <sys/ptrace.h>
#include <time.h>
#include <signal.h>
#include "p4.h"

int flag = 0;

/* In normal cases, the new process should have only FDs 0 (stdin), 1 (stdout) and 2(stderr), but GDB will open up some more FDs and never closes them.*/

int fd_check(){
  FILE *fd = fopen("/tmp","r");
  if(fileno(fd) > 5) {
     //printf("fd debugged.\n");
     return 1;
  }
  else return 0;
}
/* simple ptrace trick */
int check(){
  if (ptrace(PTRACE_TRACEME, 0, NULL, NULL) < 0) {
      //printf("ptrace debugged\n");
      return 1;
  }
  else return 0;
  ptrace(PTRACE_DETACH, 0, 0, 0);
}

/* Detect GDB by searching the /proc/PID/cmdline */
int cmdline_check(){
  char buf[20], label[20];
  FILE* fd;
  snprintf(buf, 20, "/proc/%d/cmdline", getppid());
  fd = fopen(buf, "r");
  fgets(label, 20, fd);
  if(strstr(label, "gdb") || strstr(label, "ltrace") || strstr(label, "strace")){
     //printf("cmdline debugged.\n");
     return 1;
  }
  else return 0;
  fclose(fd);
}

/* check /proc/PID/status */
int status_check(){
  char buf[20], label[20];
  FILE* fd;
  snprintf(buf, 20, "/proc/%d/status", getppid());
  fd = fopen(buf, "r");
  fgets(label, 20, fd);
  if(strstr(label, "gdb") || strstr(label, "ltrace") || strstr(label, "strace"))
     //printf("status debugged.\n");
     return 1;
  else return 0;
  fclose(fd);
}

/* SIGTRAP trick: GDB handle SIGTRAP, if raise one under GDB, it will not reach the handler and reset the debugging flag */
static int debugged = -1;
static void sigtrap_handler(int signum){ 
  debugged = 0; 
  //signal(SIGTRAP, SIG_DFL);
}

int sigtrap(){
  if(debugged == -1){
    debugged = 1;
    signal(SIGTRAP, sigtrap_handler);
    raise(SIGTRAP);
  }
  return debugged;
}

/* Scan memory for breakpoints */
/*void bp_check(){
  size_t len;
  unsigned char *pos = (unsigned char*)status_check;
  size_t i;
  //for(i=0; i<len; i++){
    if(pos[6] == 0xCC)
       printf("bp debugged.\n");
  //}
}*/

int main(int argc, char* argv[])
{
  char final[20]="";
  int i;
  if(argc < 2) {
     printf("Usage: ./p4 <STRING>\n");
     exit(0);  
  }
  /* Scan memory for INT3 breakpoint at main function */
  unsigned char *pos = (unsigned char*)(main);
  //printf("%x\n", pos);
  for(i=0;i<10;i++){
    if(pos[i] == 0xCC){
       exit(1);
    }
  }
  NOP_PAD1
  if(sigtrap() == 1)	exit(1);  
  if(fd_check() == 1)   exit(1);
  NOP_PAD2
  if(check() == 1)      exit(1);
  if(cmdline_check() == 1)  exit(1);
  if(status_check() == 1)   exit(1);
  NOP_PAD3
  strncpy(final, STR1, 7);
  if(strncmp(argv[1], final, strlen(final))){
    printf("Please try again.\n");
  }
  else{
    printf("Good Job!!.\n");
  }
  
  return(0);
}
